syntax = "proto3";

package RandoProto;

message Packet {
  int32 id = 1;
  bytes packet = 2;
}

message BingoGoal {
  string text = 1;
  bool completed = 2;
}

message UserInfo {
  string id = 1;
  string name = 2;
  optional string avatarId = 3;
  bool isDeveloper = 6;
}

message WorldMembershipInfo {
  int64 id = 1;
  UserInfo user = 2;
}

message WorldInfo {
  int64 id = 1;
  string name = 2;
  string color = 3;
  repeated WorldMembershipInfo memberships = 4;
  optional int64 seedId = 5;
}

message UniverseInfo {
  int64 id = 1;
  string name = 2;
  string color = 3;
  repeated WorldInfo worlds = 4;
}

message RaceTeamMemberInfo {
  int64 id = 1;
  UserInfo user = 2;
  optional float finishedTime = 3;
}

message RaceTeamInfo {
  int64 id = 1;
  repeated RaceTeamMemberInfo members = 2;
  optional float finishedTime = 4;
}

message RaceInfo {
  int64 id = 1;
  repeated RaceTeamInfo teams = 2;
  optional float finishedTime = 3;
}

message MultiverseMetadataInfoMessage {
    int64 id = 1;
    bool hasBingoBoard = 2;
    bool hasSeed = 3;
    repeated UserInfo members = 4;
    int64 createdAt = 5;
}

message MultiverseInfoMessage {
  enum GameHandlerType {
    Normal = 0;
    HideAndSeek = 1;
  }

  int64 id = 1;
  repeated UniverseInfo universes = 2;
  bool hasBingoBoard = 3;
  repeated UserInfo spectators = 4;
  optional int64 seedId = 5;
  GameHandlerType gameHandlerType = 6;
  bytes gameHandlerClientInfo = 7;
  bool locked = 8;
  bool isLockable = 9;
  optional RaceInfo race = 10;
  repeated UserInfo seedSpoilerDownloadedBy = 11;
  repeated string connectedUserIds = 12;
  repeated string raceReadyUserIds = 13;
}

message BingoSquare {
  string text = 1;
  repeated int64 completedBy = 2;
  repeated BingoGoal goals = 3;
  repeated int64 visibleFor = 4;
}

message RequestUpdatesMessage {
  string playerId = 1;
}

message BingoUniverseInfo {
  int64 universeId = 1;
  string score = 3;
  int32 rank = 4;
  int32 squares = 5;
  int32 lines = 6;
}

message SyncBingoUniversesMessage {
  repeated BingoUniverseInfo bingoUniverses = 1;
}

message Position {
  int32 x = 1;
  int32 y = 2;
}

message PositionedBingoSquare {
  Position position = 1;
  BingoSquare square = 2;
}

message BingoBoardMessage {
  repeated PositionedBingoSquare squares = 1;
  int32 size = 2;
  bool lockout = 3;
}

message SyncBoardMessage {
  BingoBoardMessage board = 1;
  bool replace = 2;
}

message AuthenticateMessage {
  string jwt = 1;
  string clientVersion = 2;
}

message ShowUINotificationMessage {
  string text = 1;
  string color = 2;
}

// Unused in web
message AuthenticatedMessage {
  UserInfo user = 1;
  int32 udpId = 2;
  bytes udpKey = 3;
}

message PlayerPositionMessage  {
  float x = 1;
  float y = 2;
}

message UpdatePlayerPositionMessage  {
  string playerId = 1;
  float x = 2;
  float y = 3;
}

message UdpPacket {
  int32 udpId = 1;
  bytes encryptedPacket = 2;
}

message TrackerUpdate { // 100
  string id = 1;
  int32 value = 2;
}

message ResetTracker { // 101

}

message TrackerFlagsUpdate { // 102
  repeated string flags = 1;
}

message RequestFullUpdate { // 103

}

message SetTrackerEndpointId { // 104
  string endpointId = 1;
}

message TrackerTimerStateUpdate { // 105
  float inGameTime = 1;
  float asyncLoadingTime = 2;
  bool timerShouldRun = 3;
}

message NormalGameHandlerState {
  optional int64 raceStartingAt = 1;
  optional float finishedTime = 2;
  map<int64, float> playerInGameTimes = 3;
  map<int64, float> playerFinishedTimes = 4;
  map<int64, float> worldFinishedTimes = 5;
  map<int64, float> universeFinishedTimes = 6;
  bool raceModeEnabled = 7;
  bool raceStarted = 8;
}
